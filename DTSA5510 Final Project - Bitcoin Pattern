{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9016448,"sourceType":"datasetVersion","datasetId":3106773}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-10T07:30:35.963112Z","iopub.execute_input":"2024-08-10T07:30:35.963639Z","iopub.status.idle":"2024-08-10T07:30:37.273918Z","shell.execute_reply.started":"2024-08-10T07:30:35.963594Z","shell.execute_reply":"2024-08-10T07:30:37.272499Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/ETH-USD (2017-2024).csv\n/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/ETH-USD (01-05.2024).csv\n/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/BTC-USD (2014-2024).csv\n/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/Bitcoin USD (01-05.2024).csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Bitcoin Pattern - Predict Next Day Price Up or Down\n## Introduction\n**In a world where resources are limited, maximizing financial gain is a constant goal. I am particularly interested in exploring Bitcoin to determine if there are patterns that can predict its next-day price movements. While I'm aware of advanced machine learning trading algorithms, my aim is to discover whether such patterns exist by applying my learning in DTSA5510, instead of diving too deep into complexity.**\n\n## This project will focus on:\n1. Analyzing Bitcoin Price Data: Utilizing historical data to identify trends.\n2. Applying Machine Learning Techniques: Exploring simple models to predict price movements.\n3. Pattern Discovery: Investigating the existence of predictable patterns in Bitcoin prices.\n**The goal is to understand and uncover potential predictive patterns that could be leveraged for informed decision-making.\n\n## The structure of the project is as follows.\n1. Chapter One - Data Understanding and Exploration\n2. Chapter Two - Data Transformation**\n3. Chapter Three: Applying Unsupervised and Supervised Learning method\n4. Chapter Four: PCA and Application to Different Models\n5. Chapter Five: Rechecking, Review, Discussion, and Conclusion\n\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport json","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:37.276559Z","iopub.execute_input":"2024-08-10T07:30:37.277285Z","iopub.status.idle":"2024-08-10T07:30:37.283288Z","shell.execute_reply.started":"2024-08-10T07:30:37.277245Z","shell.execute_reply":"2024-08-10T07:30:37.281856Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## Chapter One - Data Understanding and Exploration\n\n1. **Pair Selection:**  \n   There are many crypto pairs, such as BTC-USDT and BTC-USDC. For simplicity, we will focus on the BTC-USD pair.\n\n2. **Data Source:**  \n   The data is sourced from Kaggle, starting on 2014-09-18. It does not contain data prior to this date, which is understandable as Bitcoin was not commonly traded then.\n\n3. **Data Combination:**  \n   We need to combine two files into one dataset.\n\n4. **Handling Missing Data:**  \n   We identified some missing data and will remove these entries for analysis.","metadata":{}},{"cell_type":"code","source":"btc = pd.read_csv('/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/BTC-USD (2014-2024).csv')\nbtc2 = pd.read_csv('/kaggle/input/bitcoin-and-ethereum-prices-from-start-to-2023/Bitcoin USD (01-05.2024).csv')\nc_btc = pd.concat([btc, btc2], ignore_index=True)\nnull_values = c_btc.isnull()\nnull_values_per_column = c_btc.isnull().sum()\nrows_with_nulls = c_btc[c_btc.isnull().any(axis=1)]\nprint(\"\\nRows with any null values:\\n\", rows_with_nulls)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:37.285398Z","iopub.execute_input":"2024-08-10T07:30:37.286537Z","iopub.status.idle":"2024-08-10T07:30:37.364446Z","shell.execute_reply.started":"2024-08-10T07:30:37.286488Z","shell.execute_reply":"2024-08-10T07:30:37.363064Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"\nRows with any null values:\n             Date  Open  High  Low  Close  Adj Close  Volume\n3411  2024-01-20   NaN   NaN  NaN    NaN        NaN     NaN\n3533  2024-04-30   NaN   NaN  NaN    NaN        NaN     NaN\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\n# Suppress warnings\nwarnings.filterwarnings('ignore')\nc_btc_f = c_btc.fillna(method='ffill')\nprint(\"\\nDataFrame after forward filling nulls:\\n\", c_btc_f)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:37.367823Z","iopub.execute_input":"2024-08-10T07:30:37.369208Z","iopub.status.idle":"2024-08-10T07:30:37.390385Z","shell.execute_reply.started":"2024-08-10T07:30:37.369165Z","shell.execute_reply":"2024-08-10T07:30:37.389169Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"\nDataFrame after forward filling nulls:\n             Date          Open          High           Low         Close  \\\n0     2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1     2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2     2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3     2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4     2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...          ...           ...           ...           ...           ...   \n3530  2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531  2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532  2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533  2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534  2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume  \n0       424.440002  3.448320e+07  \n1       394.795990  3.791970e+07  \n2       408.903992  3.686360e+07  \n3       398.821014  2.658010e+07  \n4       402.152008  2.412760e+07  \n...            ...           ...  \n3530  63419.140625  1.953078e+10  \n3531  63113.230469  1.733483e+10  \n3532  63841.121094  2.663591e+10  \n3533  63841.121094  2.663591e+10  \n3534  59546.796875  3.746397e+10  \n\n[3535 rows x 7 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Chapter Two - Data Transformation\n\n1. **Price Transformation:**  \n   The price varies significantly between 2014 and 2024. To avoid overcomplicating the model, I decided to transform the data to (Up/Down).\n\n2. **Focus on Four Aspects:**\n\n   - **Price Trend (Up/Down):**  \n     This can also be seen as price prediction.\n\n   - **Trend Independence:**  \n     I want to see if the trend (up/down) affects the price. By using a 3-day consecutive categorization method, we have a total of 2x2x2 = 8 combinations. These categories will be applied to both price and volume.\n\n   - **Prior Day Fluctuation Rate:**  \n     This is aslo considered as it may affect the price. \n     \n **Based on above assumptions, I transformed all data into a new DataFrame called `df2`.**\n\n3. **Summary:**  \n   The volume and price trends are quite balanced. Price increases outnumber decreases, which is expected since BTC is 100x more valuable now than in 2014. The distribution of volume and price trends is uneven, suggesting that my hypothesis about their correlation with price prediction might be valid.\n\n4. **Fluctuation Rate:**  \n   The 0-5% fluctuation rate is much higher than other groups.","metadata":{}},{"cell_type":"code","source":"from io import StringIO\ndf = pd.DataFrame(c_btc_f)\n\n# Make Sure Date is Day Type\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# count the price change of the day \ndf['Change'] = df['Close'].diff()\n\n# show the price trend of the day\ndf['Price Trend'] = df['Change'].apply(lambda x: 'Up' if x > 0 else 'Down')\n\n# count the volume change of the day\ndf['Volume Change'] = df['Volume'].diff()\n\n# show the volume change of the day\ndf['Volume Trend'] = df['Volume Change'].apply(lambda x: 'Up' if x > 0 else 'Down')\n\n# 顯示結果\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:37.392128Z","iopub.execute_input":"2024-08-10T07:30:37.392623Z","iopub.status.idle":"2024-08-10T07:30:37.433492Z","shell.execute_reply.started":"2024-08-10T07:30:37.392575Z","shell.execute_reply":"2024-08-10T07:30:37.432021Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"           Date          Open          High           Low         Close  \\\n0    2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1    2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2    2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3    2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4    2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...         ...           ...           ...           ...           ...   \n3530 2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531 2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532 2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533 2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534 2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume       Change Price Trend  Volume Change  \\\n0       424.440002  3.448320e+07          NaN        Down            NaN   \n1       394.795990  3.791970e+07   -29.644012        Down   3.436500e+06   \n2       408.903992  3.686360e+07    14.108002          Up  -1.056100e+06   \n3       398.821014  2.658010e+07   -10.082978        Down  -1.028350e+07   \n4       402.152008  2.412760e+07     3.330994          Up  -2.452500e+06   \n...            ...           ...          ...         ...            ...   \n3530  63419.140625  1.953078e+10  -336.179688        Down  -4.608590e+09   \n3531  63113.230469  1.733483e+10  -305.910156        Down  -2.195955e+09   \n3532  63841.121094  2.663591e+10   727.890625          Up   9.301084e+09   \n3533  63841.121094  2.663591e+10     0.000000        Down   0.000000e+00   \n3534  59546.796875  3.746397e+10 -4294.324219        Down   1.082806e+10   \n\n     Volume Trend  \n0            Down  \n1              Up  \n2            Down  \n3            Down  \n4            Down  \n...           ...  \n3530         Down  \n3531         Down  \n3532           Up  \n3533         Down  \n3534           Up  \n\n[3535 rows x 11 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n# Count the occurrences of 'Up' and 'Down' for both volume and price trends\nvolume_trend_counts = df['Volume Trend'].value_counts()\nprice_trend_counts = df['Price Trend'].value_counts()\n\n# Plotting\nfig, axes = plt.subplots(1, 2, figsize=(14, 6))\n\n# Volume Trend Plot\nsns.barplot(x=volume_trend_counts.index, y=volume_trend_counts.values, palette='viridis', ax=axes[0])\naxes[0].set_title('Number of Days with Volume Up or Down')\naxes[0].set_xlabel('Volume Trend')\naxes[0].set_ylabel('Number of Days')\n\n# Price Trend Plot\nsns.barplot(x=price_trend_counts.index, y=price_trend_counts.values, palette='plasma', ax=axes[1])\naxes[1].set_title('Number of Days with Price Up or Down')\naxes[1].set_xlabel('Price Trend')\naxes[1].set_ylabel('Number of Days')\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:37.435212Z","iopub.execute_input":"2024-08-10T07:30:37.435665Z","iopub.status.idle":"2024-08-10T07:30:39.961550Z","shell.execute_reply.started":"2024-08-10T07:30:37.435624Z","shell.execute_reply":"2024-08-10T07:30:39.959844Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1400x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"print(df.info)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:39.963425Z","iopub.execute_input":"2024-08-10T07:30:39.963904Z","iopub.status.idle":"2024-08-10T07:30:39.981726Z","shell.execute_reply.started":"2024-08-10T07:30:39.963862Z","shell.execute_reply":"2024-08-10T07:30:39.979969Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<bound method DataFrame.info of            Date          Open          High           Low         Close  \\\n0    2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1    2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2    2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3    2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4    2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...         ...           ...           ...           ...           ...   \n3530 2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531 2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532 2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533 2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534 2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume       Change Price Trend  Volume Change  \\\n0       424.440002  3.448320e+07          NaN        Down            NaN   \n1       394.795990  3.791970e+07   -29.644012        Down   3.436500e+06   \n2       408.903992  3.686360e+07    14.108002          Up  -1.056100e+06   \n3       398.821014  2.658010e+07   -10.082978        Down  -1.028350e+07   \n4       402.152008  2.412760e+07     3.330994          Up  -2.452500e+06   \n...            ...           ...          ...         ...            ...   \n3530  63419.140625  1.953078e+10  -336.179688        Down  -4.608590e+09   \n3531  63113.230469  1.733483e+10  -305.910156        Down  -2.195955e+09   \n3532  63841.121094  2.663591e+10   727.890625          Up   9.301084e+09   \n3533  63841.121094  2.663591e+10     0.000000        Down   0.000000e+00   \n3534  59546.796875  3.746397e+10 -4294.324219        Down   1.082806e+10   \n\n     Volume Trend  \n0            Down  \n1              Up  \n2            Down  \n3            Down  \n4            Down  \n...           ...  \n3530         Down  \n3531         Down  \n3532           Up  \n3533         Down  \n3534           Up  \n\n[3535 rows x 11 columns]>\n","output_type":"stream"}]},{"cell_type":"code","source":"def generate_3_day_combination(trends):\n    combinations = []\n    for i in range(len(trends)):\n        if i < 3:\n            combinations.append(None)  # Not enough data to determine the combination\n        else:\n            combination = trends[i-3] + trends[i-2] + trends[i-1]\n            combinations.append(combination)\n    return combinations\n\n# Apply the function to the Price Trend column\ndf['3 Day Price Trend Combination'] = generate_3_day_combination(df['Price Trend'])\n\n# Drop None values from the combination column for counting\nvalid_combinations = df['3 Day Price Trend Combination'].dropna()\n\n# Get unique combinations and their counts\nunique_combinations = valid_combinations.value_counts()\n\n# Display the updated DataFrame and the combination counts\nprint(df)\nprint(\"\\nUnique 3-Day Price Trend Combinations and Counts:\\n\", unique_combinations)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:39.983432Z","iopub.execute_input":"2024-08-10T07:30:39.983916Z","iopub.status.idle":"2024-08-10T07:30:40.073425Z","shell.execute_reply.started":"2024-08-10T07:30:39.983883Z","shell.execute_reply":"2024-08-10T07:30:40.072026Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"           Date          Open          High           Low         Close  \\\n0    2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1    2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2    2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3    2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4    2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...         ...           ...           ...           ...           ...   \n3530 2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531 2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532 2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533 2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534 2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume       Change Price Trend  Volume Change  \\\n0       424.440002  3.448320e+07          NaN        Down            NaN   \n1       394.795990  3.791970e+07   -29.644012        Down   3.436500e+06   \n2       408.903992  3.686360e+07    14.108002          Up  -1.056100e+06   \n3       398.821014  2.658010e+07   -10.082978        Down  -1.028350e+07   \n4       402.152008  2.412760e+07     3.330994          Up  -2.452500e+06   \n...            ...           ...          ...         ...            ...   \n3530  63419.140625  1.953078e+10  -336.179688        Down  -4.608590e+09   \n3531  63113.230469  1.733483e+10  -305.910156        Down  -2.195955e+09   \n3532  63841.121094  2.663591e+10   727.890625          Up   9.301084e+09   \n3533  63841.121094  2.663591e+10     0.000000        Down   0.000000e+00   \n3534  59546.796875  3.746397e+10 -4294.324219        Down   1.082806e+10   \n\n     Volume Trend 3 Day Price Trend Combination  \n0            Down                          None  \n1              Up                          None  \n2            Down                          None  \n3            Down                    DownDownUp  \n4            Down                    DownUpDown  \n...           ...                           ...  \n3530         Down                    DownUpDown  \n3531         Down                    UpDownDown  \n3532           Up                  DownDownDown  \n3533         Down                    DownDownUp  \n3534           Up                    DownUpDown  \n\n[3535 rows x 12 columns]\n\nUnique 3-Day Price Trend Combinations and Counts:\n 3 Day Price Trend Combination\nUpDownUp        509\nUpUpUp          473\nDownUpUp        471\nUpUpDown        471\nDownUpDown      456\nDownDownUp      418\nUpDownDown      417\nDownDownDown    317\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"df['3 Day Volume Trend Combination'] = generate_3_day_combination(df['Volume Trend'])\n\n# Drop None values from the combination column for counting\nvalid_combinations = df['3 Day Volume Trend Combination'].dropna()\n\n# Get unique combinations and their counts\nunique_combinations = valid_combinations.value_counts()\n\n# Display the updated DataFrame and the combination counts\nprint(df)\nprint(\"\\nUnique 3-Day Volume Trend Combinations and Counts:\\n\", unique_combinations)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:40.075181Z","iopub.execute_input":"2024-08-10T07:30:40.075661Z","iopub.status.idle":"2024-08-10T07:30:40.157825Z","shell.execute_reply.started":"2024-08-10T07:30:40.075623Z","shell.execute_reply":"2024-08-10T07:30:40.156382Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"           Date          Open          High           Low         Close  \\\n0    2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1    2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2    2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3    2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4    2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...         ...           ...           ...           ...           ...   \n3530 2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531 2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532 2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533 2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534 2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume       Change Price Trend  Volume Change  \\\n0       424.440002  3.448320e+07          NaN        Down            NaN   \n1       394.795990  3.791970e+07   -29.644012        Down   3.436500e+06   \n2       408.903992  3.686360e+07    14.108002          Up  -1.056100e+06   \n3       398.821014  2.658010e+07   -10.082978        Down  -1.028350e+07   \n4       402.152008  2.412760e+07     3.330994          Up  -2.452500e+06   \n...            ...           ...          ...         ...            ...   \n3530  63419.140625  1.953078e+10  -336.179688        Down  -4.608590e+09   \n3531  63113.230469  1.733483e+10  -305.910156        Down  -2.195955e+09   \n3532  63841.121094  2.663591e+10   727.890625          Up   9.301084e+09   \n3533  63841.121094  2.663591e+10     0.000000        Down   0.000000e+00   \n3534  59546.796875  3.746397e+10 -4294.324219        Down   1.082806e+10   \n\n     Volume Trend 3 Day Price Trend Combination 3 Day Volume Trend Combination  \n0            Down                          None                           None  \n1              Up                          None                           None  \n2            Down                          None                           None  \n3            Down                    DownDownUp                     DownUpDown  \n4            Down                    DownUpDown                     UpDownDown  \n...           ...                           ...                            ...  \n3530         Down                    DownUpDown                       UpUpDown  \n3531         Down                    UpDownDown                     UpDownDown  \n3532           Up                  DownDownDown                   DownDownDown  \n3533         Down                    DownDownUp                     DownDownUp  \n3534           Up                    DownUpDown                     DownUpDown  \n\n[3535 rows x 13 columns]\n\nUnique 3-Day Volume Trend Combinations and Counts:\n 3 Day Volume Trend Combination\nUpDownDown      510\nDownDownUp      510\nDownUpUp        489\nUpUpDown        489\nDownUpDown      468\nUpDownUp        446\nDownDownDown    356\nUpUpUp          264\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"def fluctuation_rate_yesterday(current_row, previous_row):\n    if previous_row is not None:\n        return (previous_row['High'] - previous_row['Low']) / previous_row['Open'] * 100\n    else:\n        return None\n\n# Calculate the fluctuation rate using the previous row\ndf['Fluctuation Rate'] = df.apply(\n    lambda row: fluctuation_rate_yesterday(row, df.iloc[row.name - 1] if row.name > 0 else None),\n    axis=1\n)\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:40.163172Z","iopub.execute_input":"2024-08-10T07:30:40.163833Z","iopub.status.idle":"2024-08-10T07:30:40.691301Z","shell.execute_reply.started":"2024-08-10T07:30:40.163789Z","shell.execute_reply":"2024-08-10T07:30:40.688173Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"           Date          Open          High           Low         Close  \\\n0    2014-09-18    456.859985    456.859985    413.104004    424.440002   \n1    2014-09-19    424.102997    427.834991    384.532013    394.795990   \n2    2014-09-20    394.673004    423.295990    389.882996    408.903992   \n3    2014-09-21    408.084991    412.425995    393.181000    398.821014   \n4    2014-09-22    399.100006    406.915985    397.130005    402.152008   \n...         ...           ...           ...           ...           ...   \n3530 2024-04-27  63750.988281  63898.363281  62424.718750  63419.140625   \n3531 2024-04-28  63423.515625  64321.484375  62793.597656  63113.230469   \n3532 2024-04-29  63106.363281  64174.878906  61795.457031  63841.121094   \n3533 2024-04-30  63106.363281  64174.878906  61795.457031  63841.121094   \n3534 2024-05-01  60612.921875  60708.449219  59546.796875  59546.796875   \n\n         Adj Close        Volume       Change Price Trend  Volume Change  \\\n0       424.440002  3.448320e+07          NaN        Down            NaN   \n1       394.795990  3.791970e+07   -29.644012        Down   3.436500e+06   \n2       408.903992  3.686360e+07    14.108002          Up  -1.056100e+06   \n3       398.821014  2.658010e+07   -10.082978        Down  -1.028350e+07   \n4       402.152008  2.412760e+07     3.330994          Up  -2.452500e+06   \n...            ...           ...          ...         ...            ...   \n3530  63419.140625  1.953078e+10  -336.179688        Down  -4.608590e+09   \n3531  63113.230469  1.733483e+10  -305.910156        Down  -2.195955e+09   \n3532  63841.121094  2.663591e+10   727.890625          Up   9.301084e+09   \n3533  63841.121094  2.663591e+10     0.000000        Down   0.000000e+00   \n3534  59546.796875  3.746397e+10 -4294.324219        Down   1.082806e+10   \n\n     Volume Trend 3 Day Price Trend Combination  \\\n0            Down                          None   \n1              Up                          None   \n2            Down                          None   \n3            Down                    DownDownUp   \n4            Down                    DownUpDown   \n...           ...                           ...   \n3530         Down                    DownUpDown   \n3531         Down                    UpDownDown   \n3532           Up                  DownDownDown   \n3533         Down                    DownDownUp   \n3534           Up                    DownUpDown   \n\n     3 Day Volume Trend Combination  Fluctuation Rate  \n0                              None               NaN  \n1                              None          9.577547  \n2                              None         10.210486  \n3                        DownUpDown          8.465994  \n4                        UpDownDown          4.715928  \n...                             ...               ...  \n3530                       UpUpDown          2.275334  \n3531                     UpDownDown          2.311563  \n3532                   DownDownDown          2.409022  \n3533                     DownDownUp          3.770494  \n3534                     DownUpDown          3.770494  \n\n[3535 rows x 14 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"new_df = df[['Fluctuation Rate', '3 Day Price Trend Combination', '3 Day Volume Trend Combination', 'Price Trend']]\n\n# Display the new DataFrame\nprint(new_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:40.693101Z","iopub.execute_input":"2024-08-10T07:30:40.693629Z","iopub.status.idle":"2024-08-10T07:30:40.708872Z","shell.execute_reply.started":"2024-08-10T07:30:40.693575Z","shell.execute_reply":"2024-08-10T07:30:40.707182Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"      Fluctuation Rate 3 Day Price Trend Combination  \\\n0                  NaN                          None   \n1             9.577547                          None   \n2            10.210486                          None   \n3             8.465994                    DownDownUp   \n4             4.715928                    DownUpDown   \n...                ...                           ...   \n3530          2.275334                    DownUpDown   \n3531          2.311563                    UpDownDown   \n3532          2.409022                  DownDownDown   \n3533          3.770494                    DownDownUp   \n3534          3.770494                    DownUpDown   \n\n     3 Day Volume Trend Combination Price Trend  \n0                              None        Down  \n1                              None        Down  \n2                              None          Up  \n3                        DownUpDown        Down  \n4                        UpDownDown          Up  \n...                             ...         ...  \n3530                       UpUpDown        Down  \n3531                     UpDownDown        Down  \n3532                   DownDownDown          Up  \n3533                     DownDownUp        Down  \n3534                     DownUpDown        Down  \n\n[3535 rows x 4 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"## Drop rows with None values in '3 Day Price Trend Combination'\nnew_df = new_df.dropna(subset=['3 Day Price Trend Combination'])\n\n# Count the frequency of each combination\ncombination_counts = new_df['3 Day Price Trend Combination'].value_counts()\n\n# Plotting the distribution of 3 Day Price Trend Combination\nplt.figure(figsize=(12, 6))\nsns.barplot(x=combination_counts.index, y=combination_counts.values, palette='viridis')\nplt.title('Distribution of 3 Day Price Trend Combination')\nplt.xlabel('3 Day Price Trend Combination')\nplt.ylabel('Frequency')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:40.711354Z","iopub.execute_input":"2024-08-10T07:30:40.712039Z","iopub.status.idle":"2024-08-10T07:30:41.125171Z","shell.execute_reply.started":"2024-08-10T07:30:40.711849Z","shell.execute_reply":"2024-08-10T07:30:41.123385Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Drop rows with None values in '3 Day Volume Trend Combination'\nnew_df = new_df.dropna(subset=['3 Day Volume Trend Combination'])\n\n# Count the frequency of each combination\ncombination_counts = new_df['3 Day Volume Trend Combination'].value_counts()\n\n# Plotting the distribution of 3 Day Volume Trend Combination\nplt.figure(figsize=(12, 6))\nsns.barplot(x=combination_counts.index, y=combination_counts.values, palette='viridis')\nplt.title('Distribution of 3 Day Volume Trend Combination')\nplt.xlabel('3 Day Volume Trend Combination')\nplt.ylabel('Frequency')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:41.127577Z","iopub.execute_input":"2024-08-10T07:30:41.128602Z","iopub.status.idle":"2024-08-10T07:30:41.677183Z","shell.execute_reply.started":"2024-08-10T07:30:41.128531Z","shell.execute_reply":"2024-08-10T07:30:41.675711Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Define categories\nbins = [0, 5, 10, 15, 20, float('inf')]\nlabels = ['0-5%', '5%-10%', '10%-15%', '15%-20%', '20%<']\n\n# Categorize fluctuation rates\nCategories = pd.cut(new_df['Fluctuation Rate'], bins=bins, labels=labels, right=False)\n\n# Plot histogram\nplt.figure(figsize=(8, 6))\nCategories.value_counts(sort=False).plot(kind='bar', color='skyblue')\nplt.title('Fluctuation Rate Categories')\nplt.xlabel('Fluctuation Rate (%)')\nplt.ylabel('Frequency')\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:41.679287Z","iopub.execute_input":"2024-08-10T07:30:41.679811Z","iopub.status.idle":"2024-08-10T07:30:42.156670Z","shell.execute_reply.started":"2024-08-10T07:30:41.679769Z","shell.execute_reply":"2024-08-10T07:30:42.155290Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"print(new_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:42.159141Z","iopub.execute_input":"2024-08-10T07:30:42.159698Z","iopub.status.idle":"2024-08-10T07:30:42.172335Z","shell.execute_reply.started":"2024-08-10T07:30:42.159644Z","shell.execute_reply":"2024-08-10T07:30:42.170682Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"      Fluctuation Rate 3 Day Price Trend Combination  \\\n3             8.465994                    DownDownUp   \n4             4.715928                    DownUpDown   \n5             2.452012                      UpDownUp   \n6            11.281004                      DownUpUp   \n7             3.437746                      UpUpDown   \n...                ...                           ...   \n3530          2.275334                    DownUpDown   \n3531          2.311563                    UpDownDown   \n3532          2.409022                  DownDownDown   \n3533          3.770494                    DownDownUp   \n3534          3.770494                    DownUpDown   \n\n     3 Day Volume Trend Combination Price Trend  \n3                        DownUpDown        Down  \n4                        UpDownDown          Up  \n5                      DownDownDown          Up  \n6                        DownDownUp        Down  \n7                        DownUpDown        Down  \n...                             ...         ...  \n3530                       UpUpDown        Down  \n3531                     UpDownDown        Down  \n3532                   DownDownDown          Up  \n3533                     DownDownUp        Down  \n3534                     DownUpDown        Down  \n\n[3532 rows x 4 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"mapping_dict = {\n    'DownDownDown': 0,\n    'UpUpUp': 1,\n    'UpUpDown': 2,\n    'UpDownUp': 3,\n    'UpDownDown': 4,\n    'DownUpUp': 5,\n    'DownDownUp': 6,\n    'DownUpDown': 7\n}\nbinary_mapping = {\n    'Up': 1,\n    'Down': 0\n}\n\nnew_df['F-rate'] = new_df['Fluctuation Rate']\nnew_df['3Days Price Class'] = new_df['3 Day Price Trend Combination'].map(mapping_dict)\nnew_df['3Days Volume Trend Class'] = new_df['3 Day Volume Trend Combination'].map(mapping_dict)\nnew_df['Price(Prediction)'] = new_df['Price Trend'].map(binary_mapping)\n\nselected_columns = ['F-rate', '3Days Price Class', '3Days Volume Trend Class', 'Price(Prediction)'].copy()\ndf2=new_df[selected_columns].copy()\nprint(df2)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:42.174142Z","iopub.execute_input":"2024-08-10T07:30:42.174687Z","iopub.status.idle":"2024-08-10T07:30:42.199573Z","shell.execute_reply.started":"2024-08-10T07:30:42.174636Z","shell.execute_reply":"2024-08-10T07:30:42.198198Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"         F-rate  3Days Price Class  3Days Volume Trend Class  \\\n3      8.465994                  6                         7   \n4      4.715928                  7                         4   \n5      2.452012                  3                         0   \n6     11.281004                  5                         6   \n7      3.437746                  2                         7   \n...         ...                ...                       ...   \n3530   2.275334                  7                         2   \n3531   2.311563                  4                         4   \n3532   2.409022                  0                         0   \n3533   3.770494                  6                         6   \n3534   3.770494                  7                         7   \n\n      Price(Prediction)  \n3                     0  \n4                     1  \n5                     1  \n6                     0  \n7                     0  \n...                 ...  \n3530                  0  \n3531                  0  \n3532                  1  \n3533                  0  \n3534                  0  \n\n[3532 rows x 4 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.cluster import AgglomerativeClustering\n\nmodel=None\n# your code here\nmodel = AgglomerativeClustering(n_clusters=8, metric = 'euclidean', linkage='ward')\nlabels = model.fit_predict(df2)\nprint(\"Cluster labels\", labels)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:42.201293Z","iopub.execute_input":"2024-08-10T07:30:42.202050Z","iopub.status.idle":"2024-08-10T07:30:43.198824Z","shell.execute_reply.started":"2024-08-10T07:30:42.202005Z","shell.execute_reply":"2024-08-10T07:30:43.197243Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Cluster labels [3 3 2 ... 6 3 3]\n","output_type":"stream"}]},{"cell_type":"code","source":"import itertools\nimport numpy as np\n\ndef label_permute_compare(ytdf, yp, n=2):\n    \"\"\"\n    Compare true labels with predicted clustering labels using permutations.\n    \n    Parameters:\n    - ytdf: DataFrame or array-like of true labels.\n    - yp: Array-like of predicted clustering labels.\n    - n: Number of unique labels to consider (default is 8).\n    \n    Returns:\n    - best_p: Dictionary mapping the best permutation of labels.\n    - best_acc: Best accuracy achieved with the permutation.\n    \n    Example output: (3, 4, 1, 2, 0), 0.74\n    \"\"\"\n    # Convert ytdf to a numpy array and ensure it is a 1D array\n    y_true = np.array(ytdf).reshape(-1)\n    \n    # Check that y_true and yp have the same length\n    if len(y_true) != len(yp):\n        raise ValueError(f\"Length mismatch: y_true has length {len(y_true)}, yp has length {len(yp)}\")\n    \n    # Get unique labels from y_true\n    uniq_labels = np.unique(y_true)\n    \n    # Check if the number of unique labels is within the expected range\n    if len(uniq_labels) > n:\n        raise ValueError(f\"Number of unique labels ({len(uniq_labels)}) exceeds the specified limit ({n})\")\n    \n    # Generate all permutations of the unique labels\n    perm = itertools.permutations(uniq_labels)\n    \n    best_p, best_acc = None, 0\n    \n    # Iterate over each permutation\n    for p in perm:\n        # Create a mapping from unique labels to the current permutation\n        p_label_map = {label: int_label for label, int_label in zip(uniq_labels, p)}\n        \n        # Map y_true labels to the current permutation\n        p_labels = np.array([p_label_map[label] for label in y_true])\n        \n        # Calculate the accuracy for the current permutation\n        acc = np.mean(p_labels == yp)\n        \n        # Update the best permutation and accuracy if the current one is better\n        if acc > best_acc:\n            best_p = {num: l for num, l in zip(p, uniq_labels)}\n            best_acc = acc\n    \n    # Return the best permutation and the best accuracy\n    return best_p, best_acc","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:43.200645Z","iopub.execute_input":"2024-08-10T07:30:43.201097Z","iopub.status.idle":"2024-08-10T07:30:43.215836Z","shell.execute_reply.started":"2024-08-10T07:30:43.201063Z","shell.execute_reply":"2024-08-10T07:30:43.214368Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"print(df2)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:43.217446Z","iopub.execute_input":"2024-08-10T07:30:43.217926Z","iopub.status.idle":"2024-08-10T07:30:43.238220Z","shell.execute_reply.started":"2024-08-10T07:30:43.217871Z","shell.execute_reply":"2024-08-10T07:30:43.236872Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"         F-rate  3Days Price Class  3Days Volume Trend Class  \\\n3      8.465994                  6                         7   \n4      4.715928                  7                         4   \n5      2.452012                  3                         0   \n6     11.281004                  5                         6   \n7      3.437746                  2                         7   \n...         ...                ...                       ...   \n3530   2.275334                  7                         2   \n3531   2.311563                  4                         4   \n3532   2.409022                  0                         0   \n3533   3.770494                  6                         6   \n3534   3.770494                  7                         7   \n\n      Price(Prediction)  \n3                     0  \n4                     1  \n5                     1  \n6                     0  \n7                     0  \n...                 ...  \n3530                  0  \n3531                  0  \n3532                  1  \n3533                  0  \n3534                  0  \n\n[3532 rows x 4 columns]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Chapter Three: Applying Unsupervised and Supervised Learning method\n\n**Unsupervised**\n\n1. **Agglomerative Clustering Model:**\n   - Best performance with linkage: complete, affinity: euclidean.\n   - Label order: {1: 0, 0: 1}\n   - Accuracy: 0.5311\n   - Time: 0.3941 seconds\n   - Since the prediction is binary (up/down), 0.5311 accuracy is only slightly better than random guessing.\n\n2. **K-Means Model:**\n   - Accuracy: 0.5170\n   - Time: 1.2889 seconds\n\n3. **Two Cluster Model Comparison:**\n   - Both clustering models yield similar results.\n   \n4. **Recommender System(RecSys)**\n   - All result range around 0.5, resembling random guessing.\n\n**Supervised**\n\n5. **Random Forest:**\n   - Best feature combination: F-rate + 3 Days Volume Trend Class = 0.54\n   - Other combinations range from 0.50 to 0.54, resembling random guessing.\n\n### Summary:\n\n1. Both unsupervised and supervised models perform only slightly better than random guessing.\n2. However, we have not applied Principal Component Analysis(PCA) yet.\n3. PCA is known to help remove noise and redundant features and often improbes the performance of mechine learning models\n\nLet's explore applying PCA to transform the DataFrame `df2` in the next chapter!","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\n# 假設數據已經加載到 DataFrame `df`\n# 這裡我們創建一個隨機的 DataFrame 作為示例\nnp.random.seed(42)  # 為了結果可重現\nn_samples = 3532\ndata = {\n    '3Days Price Class': np.random.randint(0, 8, size=n_samples),\n    '3Days Volume Trend Class': np.random.randint(0, 8, size=n_samples),\n    'Price(Prediction)': np.random.randint(0, 2, size=n_samples),\n}\n\ns_df = pd.DataFrame(data)\n\n# 假設這些是你已知的真實標籤\n#labels = np.random.choice(['DownDownDown', 'UpUpUp', 'UpUpDown', 'UpDownUp', \n                           #'UpDownDown', 'DownUpUp', 'DownDownUp', 'DownUpDown'], n_samples)\n\n#label_mapping = {\n    #'DownDownDown': 0,\n    #'UpUpUp': 1,\n    #'UpUpDown': 2,\n    #'UpDownUp': 3,\n    #'UpDownDown': 4,\n    #'DownUpUp': 5,\n    #'DownDownUp': 6,\n    #'DownUpDown': 7\n#}\n\n#df2['3Days Price Class'] = [label_mapping[l] for l in labels]\n\n# 提取用於聚類的特徵\nX = df2[['F-rate', '3Days Price Class', '3Days Volume Trend Class','Price(Prediction)']].values\n\n# 使用 AgglomerativeClustering 進行聚類\nclustering_model = AgglomerativeClustering(n_clusters=2)\nmodel_labels = clustering_model.fit_predict(X)\n\nyp = model_labels\n\ndef label_permute_compare(y_true, yp, n=2):\n    \"\"\"\n    Compare true labels with predicted clustering labels using permutations.\n    \n    Parameters:\n    - y_true: Array-like of true labels.\n    - yp: Array-like of predicted clustering labels.\n    - n: Number of unique labels to consider (default is 8).\n    \n    Returns:\n    - best_p: Dictionary mapping the best permutation of labels.\n    - best_acc: Best accuracy achieved with the permutation.\n    \"\"\"\n    y_true = np.array(y_true).reshape(-1)\n    \n    if len(y_true) != len(yp):\n        raise ValueError(f\"Length mismatch: y_true has length {len(y_true)}, yp has length {len(yp)}\")\n    \n    uniq_labels = np.unique(y_true)\n    \n    if len(uniq_labels) > n:\n        raise ValueError(f\"Number of unique labels ({len(uniq_labels)}) exceeds the specified limit ({n})\")\n    \n    perm = itertools.permutations(uniq_labels)\n    \n    best_p, best_acc = None, 0\n    \n    for p in perm:\n        p_label_map = {label: int_label for label, int_label in zip(uniq_labels, p)}\n        p_labels = np.array([p_label_map[label] for label in y_true])\n        acc = np.mean(p_labels == yp)\n        \n        if acc > best_acc:\n            best_p = {num: l for num, l in zip(p, uniq_labels)}\n            best_acc = acc\n    \n    return best_p, best_acc\n\n# 生成 y_true\ny_true = df2['Price(Prediction)'].values\n\n# 確保長度匹配\nassert len(y_true) == len(yp), f\"Length mismatch: y_true has length {len(y_true)}, yp has length {len(yp)}\"\n\n# 比較標籤\nlabelorder, acc = label_permute_compare(y_true, yp)\nprint(\"Best label permutation:\", labelorder)\nprint(\"Best accuracy:\", acc)\n\n# 生成混淆矩陣\ncm = confusion_matrix(y_true, yp)\nprint(\"Confusion Matrix:\\n\", cm)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:43.240005Z","iopub.execute_input":"2024-08-10T07:30:43.240417Z","iopub.status.idle":"2024-08-10T07:30:43.743492Z","shell.execute_reply.started":"2024-08-10T07:30:43.240386Z","shell.execute_reply":"2024-08-10T07:30:43.741905Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Best label permutation: {1: 0, 0: 1}\nBest accuracy: 0.5268969422423556\nConfusion Matrix:\n [[1446  216]\n [1645  225]]\n","output_type":"stream"}]},{"cell_type":"code","source":"class_names = ['Down','Up']\n\ndef plot_confusion_matrix(cm, class_names):\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n    plt.xlabel('Predicted Labels')\n    plt.ylabel('True Labels')\n    plt.title('Confusion Matrix')\n    plt.show()\n\nplot_confusion_matrix(cm, class_names)","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:43.745220Z","iopub.execute_input":"2024-08-10T07:30:43.745647Z","iopub.status.idle":"2024-08-10T07:30:44.058280Z","shell.execute_reply.started":"2024-08-10T07:30:43.745611Z","shell.execute_reply":"2024-08-10T07:30:44.056661Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import time\nfor linkage in ['ward', 'complete', 'average', 'single']:\n    for affinity in ['euclidean', 'l1', 'l2', 'manhattan', 'cosine']:\n        acc = 0\n        t0 = time.time()\n        try:\n            # 如果 linkage 是 'ward'，則 affinity 必須是 'euclidean'\n            if linkage == 'ward' and affinity != 'euclidean':\n                raise ValueError(\"Ward linkage only works with Euclidean affinity.\")\n            \n            # 構建並擬合聚類模型\n            model = AgglomerativeClustering(n_clusters=2, linkage=linkage, affinity=affinity)\n            model_labels = model.fit_predict(X)\n            \n            # 比較標籤\n            labelorder, acc = label_permute_compare(df2['Price(Prediction)'].values, model_labels)\n            t1 = time.time()\n            print(f\"{t1-t0:.4f} seconds | Linkage: {linkage}, Affinity: {affinity}, Label order: {labelorder}, Accuracy: {acc:.4f}\")\n        \n        except Exception as e:\n            print(f\"{linkage} with {affinity} not allowed. ({str(e)})\")\n            \n","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:44.060259Z","iopub.execute_input":"2024-08-10T07:30:44.061385Z","iopub.status.idle":"2024-08-10T07:30:50.125850Z","shell.execute_reply.started":"2024-08-10T07:30:44.061325Z","shell.execute_reply":"2024-08-10T07:30:50.124398Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"0.4805 seconds | Linkage: ward, Affinity: euclidean, Label order: {1: 0, 0: 1}, Accuracy: 0.5269\nward with l1 not allowed. (Ward linkage only works with Euclidean affinity.)\nward with l2 not allowed. (Ward linkage only works with Euclidean affinity.)\nward with manhattan not allowed. (Ward linkage only works with Euclidean affinity.)\nward with cosine not allowed. (Ward linkage only works with Euclidean affinity.)\n0.4620 seconds | Linkage: complete, Affinity: euclidean, Label order: {1: 0, 0: 1}, Accuracy: 0.5311\n0.4523 seconds | Linkage: complete, Affinity: l1, Label order: {1: 0, 0: 1}, Accuracy: 0.5306\n0.4592 seconds | Linkage: complete, Affinity: l2, Label order: {1: 0, 0: 1}, Accuracy: 0.5311\n0.4481 seconds | Linkage: complete, Affinity: manhattan, Label order: {1: 0, 0: 1}, Accuracy: 0.5306\n0.4744 seconds | Linkage: complete, Affinity: cosine, Label order: {1: 0, 0: 1}, Accuracy: 0.5204\n0.5472 seconds | Linkage: average, Affinity: euclidean, Label order: {1: 0, 0: 1}, Accuracy: 0.5294\n0.5637 seconds | Linkage: average, Affinity: l1, Label order: {1: 0, 0: 1}, Accuracy: 0.5309\n0.5276 seconds | Linkage: average, Affinity: l2, Label order: {1: 0, 0: 1}, Accuracy: 0.5294\n0.4948 seconds | Linkage: average, Affinity: manhattan, Label order: {1: 0, 0: 1}, Accuracy: 0.5309\n0.4978 seconds | Linkage: average, Affinity: cosine, Label order: {1: 0, 0: 1}, Accuracy: 0.5289\n0.1123 seconds | Linkage: single, Affinity: euclidean, Label order: {1: 0, 0: 1}, Accuracy: 0.5292\n0.1014 seconds | Linkage: single, Affinity: l1, Label order: {1: 0, 0: 1}, Accuracy: 0.5292\n0.1010 seconds | Linkage: single, Affinity: l2, Label order: {1: 0, 0: 1}, Accuracy: 0.5292\n0.1020 seconds | Linkage: single, Affinity: manhattan, Label order: {1: 0, 0: 1}, Accuracy: 0.5292\n0.2275 seconds | Linkage: single, Affinity: cosine, Label order: {1: 0, 0: 1}, Accuracy: 0.5292\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.cluster import KMeans\n# KMeans 聚類\nt0 = time.time()\nkmeans = KMeans(n_clusters=2, random_state=42).fit(X)\nt1 = time.time()\nkmeans_time = t1 - t0\nprint(f\"KMeans clustering took {kmeans_time:.4f} seconds\")\n\n# 比較 KMeans 標籤\nlabelorder, acc = label_permute_compare(df2['Price(Prediction)'].values, kmeans.labels_)\nprint(f\"KMeans Label order: {labelorder}, Accuracy: {acc:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:50.127419Z","iopub.execute_input":"2024-08-10T07:30:50.127859Z","iopub.status.idle":"2024-08-10T07:30:51.330461Z","shell.execute_reply.started":"2024-08-10T07:30:50.127826Z","shell.execute_reply":"2024-08-10T07:30:51.328609Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"KMeans clustering took 1.1827 seconds\nKMeans Label order: {1: 0, 0: 1}, Accuracy: 0.5170\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nclass RecSys:\n    def __init__(self, data):\n        self.data = data.reset_index(drop=True)\n\nclass FrateBased(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['F-rate']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\n\nclass PriceClassBased(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['3Days Price Class']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\n\nclass VolumeTrendClassBased(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['3Days Volume Trend Class']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\n\n\n\n# Split data into train and test\ntrain_data, test_data = train_test_split(df2, test_size=0.2, random_state=42)\n\n# Create instances\nfrate_based = FrateBased(train_data)\nprice_class_based = PriceClassBased(train_data)\nvolume_trend_class_based = VolumeTrendClassBased(train_data)\n\n# Evaluate each recommendation system\ndef evaluate(system, test_data):\n    correct = 0\n    for idx in range(len(test_data)):\n        recommendations = system.recommend(idx, top_n=1)\n        if not recommendations.empty and recommendations.iloc[0]['Price(Prediction)'] == test_data.iloc[idx]['Price(Prediction)']:\n            correct += 1\n    return correct / len(test_data)\n\n# Calculate success rates\nfrate_success_rate = evaluate(frate_based, test_data)\nprice_class_success_rate = evaluate(price_class_based, test_data)\nvolume_trend_success_rate = evaluate(volume_trend_class_based, test_data)\n\n# Plot success rates\nsuccess_rates = [frate_success_rate, price_class_success_rate, volume_trend_success_rate]\nlabels = ['F-rate', 'Price Class', 'Volume Trend Class']\n\nplt.bar(labels, success_rates, color=['blue', 'green', 'red'])\nplt.ylim(0, 1)\nplt.title('Success Rates of Recommendation Systems')\nplt.xlabel('Recommendation System')\nplt.ylabel('Success Rate')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-10T07:30:51.332438Z","iopub.execute_input":"2024-08-10T07:30:51.332957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n\n# Define feature combinations\nfeature_combinations = [\n    ['F-rate'],\n    ['3Days Price Class'],\n    ['3Days Volume Trend Class'],\n    ['F-rate', '3Days Price Class'],\n    ['F-rate', '3Days Volume Trend Class'],\n    ['3Days Price Class', '3Days Volume Trend Class'],\n    ['F-rate', '3Days Price Class', '3Days Volume Trend Class']\n]\n\n# Store accuracies for each combination\naccuracies = []\n\n# Evaluate each combination\nfor features in feature_combinations:\n    X = df2[features]\n    y = df2['Price(Prediction)']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    rf_model = RandomForestClassifier(random_state=42)\n    rf_model.fit(X_train, y_train)\n    y_pred = rf_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    accuracies.append(accuracy)\n\n# Plot accuracies for each combination\nlabels = ['+'.join(comb) for comb in feature_combinations]\n\nplt.figure(figsize=(10, 6))\nbars = plt.bar(labels, accuracies, color='purple')\nplt.bar(labels, accuracies, color='purple')\nplt.xticks(rotation=45, ha='right')\nplt.title('Accuracy of Random Forest with Different Feature Combinations')\nplt.xlabel('Feature Combination')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.tight_layout()\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2f}', ha='center', va='bottom')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Chapter Four: PCA and Application to Different Models\n\n1. **PCA Reduction:**\n   - Reduced to 3 principal components, creating a new DataFrame `df3`.\n\n2. **Application to Recommendation System:**\n   - Results: [0.5255, 0.5255, 0.4745]\n   - No significant improvement observed.\n\n3. **Application to Random Forest:**\n   - All combinations show significant improvement!\n   - PC1 + PC3 accuracy is 1; PC1 + PC2 + PC3 is 0.99.\n   - Results seem too good to be true, indicating a need for further exploration.\n\n4. **Application to Logistic Regression, SVC, and K-Nearest Neighbors:**\n   - All models achieved over 0.8 accuracy.Some of it is 1 also! \n\n### Conclusion\n\n- The results appear too good to be true, suggesting possible overfitting.\n- The dataset spans 10 years, which may be too extensive for investment strategies.\n- In the next chapter, we will explore using more recent records (100 rows and 10 rows) to see the results.","metadata":{}},{"cell_type":"code","source":"import numpy as np\nclass PCA:\n    def __init__(self, target_explained_variance=None):\n        \"\"\"\n        explained_variance: float, the target level of explained variance\n        \"\"\"\n        self.target_explained_variance = target_explained_variance\n        self.feature_size = -1\n\n    def standardize(self, X):\n        \"\"\"\n        standardize features using standard scaler\n        :param X: input data with shape m (# of observations) X n (# of features)\n        :return: standardized features (Hint: use skleanr's StandardScaler. Import any library as needed)\n        \"\"\"\n        # your code here\n        from sklearn.preprocessing import StandardScaler\n        return StandardScaler().fit_transform(X)\n\n    def compute_mean_vector(self, X_std):\n        \"\"\"\n        compute mean vector\n        :param X_std: transformed data\n        :return n X 1 matrix: mean vector\n        \"\"\"\n        # your code here\n        return np.mean(X_std, axis=0)\n\n    def compute_cov(self, X_std, mean_vec):\n        \"\"\"\n        Covariance using mean, (don't use any numpy.cov)\n        :param X_std:\n        :param mean_vec:\n        :return n X n matrix:: covariance matrix\n        \"\"\"\n        # your code here\n        return (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[0] - 1)\n\n    def compute_eigen_vector(self, cov_mat):\n        \"\"\"\n        Eigenvector and eigen values using numpy. Uses numpy's eigenvalue function\n        :param cov_mat:\n        :return: (eigen_values, eigen_vector)\n        \"\"\"\n        # your code here\n        return np.linalg.eig(cov_mat)\n\n    def compute_explained_variance(self, eigen_vals):\n        \"\"\"\n        sort eigen values and compute explained variance.\n        explained variance informs the amount of information (variance)\n        can be attributed to each of  the principal components.\n        :param eigen_vals:\n        :return: explained variance.\n        \"\"\"\n        # your code here\n        tot = sum(eigen_vals)\n        return [(i / tot) for i in sorted(eigen_vals, reverse=True)]\n\n    def cumulative_sum(self, var_exp):\n        \"\"\"\n        return cumulative sum of explained variance.\n        :param var_exp: explained variance\n        :return: cumulative explained variance\n        \"\"\"\n        return np.cumsum(var_exp)\n\n    def compute_weight_matrix(self, eig_pairs, cum_var_exp):\n        \"\"\"\n        compute weight matrix of top principal components conditioned on target\n        explained variance.\n        (Hint : use cumilative explained variance and target_explained_variance to find\n        top components)\n        \n        :param eig_pairs: list of tuples containing eigenvalues and eigenvectors, \n        sorted by eigenvalues in descending order (the biggest eigenvalue and corresponding eigenvectors first).\n        :param cum_var_exp: cumulative expalined variance by features\n        :return: weight matrix (the shape of the weight matrix is n X k)\n        \"\"\"\n        # your code here\n        matrix_w = np.ones((self.feature_size, 1))\n        for i in range(len(eig_pairs)):\n            if cum_var_exp[i] < self.target_explained_variance:\n                matrix_w = np.hstack((matrix_w,\n                                      eig_pairs[i][1].reshape(self.feature_size,\n                                                              1)))\n        return np.delete(matrix_w, [0], axis=1).tolist()\n\n    def transform_data(self, X_std, matrix_w):\n        \"\"\"\n        transform data to subspace using weight matrix\n        :param X_std: standardized data\n        :param matrix_w: weight matrix\n        :return: data in the subspace\n        \"\"\"\n        return X_std.dot(matrix_w)\n\n    def fit(self, X):\n        \"\"\"    \n        entry point to the transform data to k dimensions\n        standardize and compute weight matrix to transform data.\n        The fit functioin returns the transformed features. k is the number of features which cumulative \n        explained variance ratio meets the target_explained_variance.\n        :param   m X n dimension: train samples\n        :return  m X k dimension: subspace data. \n        \"\"\"\n    \n        self.feature_size = X.shape[1]\n        \n        # your code here\n        ### BEGIN SOLUTION\n        # 16 pts\n        X_std = self.standardize(X) # partial: 2 pts\n        #---- partial 2 pts\n        mean_vec = self.compute_mean_vector(X_std)\n        cov_mat = self.compute_cov(X_std, mean_vec) \n        #-------\n        eig_vals, eig_vecs = self.compute_eigen_vector(cov_mat) #partial 2pts\n        #----- partial 4 pts\n        eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:, i]) for i in\n                     range(len(eig_vals))]\n        eig_pairs.sort()\n        eig_pairs.reverse()\n        #-------\n        var_exp = self.compute_explained_variance(eig_vals) # partial 2 pts\n        cum_var_exp = self.cumulative_sum(var_exp) #partial 2pts\n        matrix_w = self.compute_weight_matrix(eig_pairs=eig_pairs,cum_var_exp=cum_var_exp) #partial 2 pts\n        ### END SOLUTION\n        print(len(matrix_w),len(matrix_w[0]))\n        return self.transform_data(X_std=X_std, matrix_w=matrix_w)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pca_handler = PCA(target_explained_variance=0.99)\nX_train_updated = pca_handler.fit(X_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n# Features\nfeatures = ['F-rate', '3Days Price Class', '3Days Volume Trend Class']\n\n# Standardize the data\nx = df2.loc[:, features].values\nx = StandardScaler().fit_transform(x)\n\n# PCA\npca = PCA(n_components=3)\nprincipal_components = pca.fit_transform(x)\n\n# Create a DataFrame with the principal components\nprincipal_df = pd.DataFrame(data=principal_components, columns=['Principal Component 1', 'Principal Component 2', 'Principal Component 3'])\n\n# Concatenate with the target\nfinal_df = pd.concat([principal_df, df2[['Price(Prediction)']]], axis=1)\n\nprint(final_df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nimport pandas as pd\n\n# Drop rows with NaN values\ndf3 = final_df.dropna()\n\n# Prepare data for plotting\nx = df3['Principal Component 1']\ny = df3['Principal Component 2']\nz = df3['Principal Component 3']\ncolors = df3['Price(Prediction)']\n\n# Create a 3D plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Scatter plot with color coding\nscatter = ax.scatter(x, y, z, c=colors, cmap='viridis')\n\n# Add a color bar\ncolor_bar = fig.colorbar(scatter, ax=ax, label='Price(Prediction)')\n\n# Label axes\nax.set_xlabel('Principal Component 1')\nax.set_ylabel('Principal Component 2')\nax.set_zlabel('Principal Component 3')\nax.set_title('3D PCA Plot with Price(Prediction)')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class PC1(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['Principal Component 1']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\n\nclass PC2(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['Principal Component 2']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\nclass PC3(RecSys):\n    def recommend(self, target_index, top_n=3):\n        similarities = cosine_similarity(self.data[['Principal Component 3']])\n        target_similarities = similarities[target_index]\n        similar_indices = target_similarities.argsort()[-top_n-1:-1][::-1]\n        return self.data.iloc[similar_indices]\n\n# Split data into train and test\ntrain_data, test_data = train_test_split(df3, test_size=0.2, random_state=42)\n\n# Create instances\nPC1 = PC1(df3)\nPC2 = PC2(df3)\nPC3 = PC3(df3)\n\n# Evaluate each recommendation system\ndef evaluate(system, test_data):\n    correct = 0\n    for idx in range(len(test_data)):\n        recommendations = system.recommend(idx, top_n=1)\n        if not recommendations.empty and recommendations.iloc[0]['Price(Prediction)'] == test_data.iloc[idx]['Price(Prediction)']:\n            correct += 1\n    return correct / len(test_data)\n\n# Calculate success rates\nPC1 = evaluate(PC1, test_data)\nPC2 = evaluate(PC2, test_data)\nPC3 = evaluate(PC3, test_data)\n\n\n# Plot success rates\nsuccess_rates = [PC1, PC2, PC3]\nlabels = ['PC1', 'PC2', 'PC3']\nprint(success_rates)\nplt.bar(labels, success_rates, color=['blue', 'green', 'Red'])\nplt.ylim(0, 1)\nplt.title('Success Rates of Recommendation Systems(After PCA)')\nplt.xlabel('Recommendation System')\nplt.ylabel('Success Rate')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define feature combinations\nfeature_combinations2 = [\n    ['Principal Component 1'],\n    ['Principal Component 2'],\n    ['Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2'],\n    ['Principal Component 2', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2','Principal Component 3']\n]\n\n# Store accuracies for each combination\naccuracies2 = []\n\n# Evaluate each combination\nfor features in feature_combinations2:\n    X = df3[features]\n    y = df3['Price(Prediction)']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    rf_model = RandomForestClassifier(random_state=42)\n    rf_model.fit(X_train, y_train)\n    y_pred = rf_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    accuracies2.append(accuracy)\n\n# Plot accuracies for each combination\nlabels = ['+'.join(comb) for comb in feature_combinations2]\n\nplt.figure(figsize=(10, 10))\nbars = plt.bar(labels, accuracies2, color='grey')\nplt.xticks(rotation=45, ha='right')\nplt.title('Accuracy of Random Forest with Different Feature Combinations')\nplt.xlabel('Feature Combination')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.tight_layout()\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2f}', ha='center', va='bottom')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import joblib\njoblib.dump(rf_model, 'trained_model.pkl')\nprint(\"Current Directory:\", os.getcwd())\nmodeluse =joblib.load('/kaggle/working/trained_model.pkl')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n\n# Assuming df3 is your DataFrame\n# Define features and target\nfeatures = ['Principal Component 1', 'Principal Component 2', 'Principal Component 3']\nX = df3[features]\ny = df3['Price(Prediction)']\n\n# Standardize the data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Initialize models\nmodels = {\n    'Logistic Regression': LogisticRegression(random_state=42),\n    'Support Vector Machine': SVC(random_state=42),\n    'k-Nearest Neighbors': KNeighborsClassifier()\n}\n\n# Evaluate each model using cross-validation\nscores_dict = {}\n\nfor name, model in models.items():\n    scores = cross_val_score(model, X_scaled, y, cv=5, scoring='accuracy')\n    scores_dict[name] = scores\n\n# Plot the scores\nplt.figure(figsize=(10, 6))\nfor name, scores in scores_dict.items():\n    plt.plot(range(1, 6), scores, marker='o', label=name)\n\nplt.title('Cross-Validation Scores for Different Models')\nplt.xlabel('Fold')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.xticks(range(1, 6))\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df3.tail())\nlast_100_rows = df3.tail(100)\ndf4 = last_100_rows.copy()\nfeatures = ['Principal Component 1', 'Principal Component 2', 'Principal Component 3']\nX = df4[features]\ny = df4['Price(Prediction)']\n\n# Standardize the data\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Initialize models\nmodels = {\n    'Logistic Regression': LogisticRegression(random_state=42),\n    'Support Vector Machine': SVC(random_state=42),\n    'k-Nearest Neighbors': KNeighborsClassifier()\n}\n\n# Evaluate each model using cross-validation\nscores_dict = {}\n\nfor name, model in models.items():\n    scores = cross_val_score(model, X_scaled, y, cv=5, scoring='accuracy')\n    scores_dict[name] = scores\n\n# Plot the scores\nplt.figure(figsize=(10, 6))\nfor name, scores in scores_dict.items():\n    plt.plot(range(1, 6), scores, marker='o', label=name)\n\nplt.title('Cross-Validation Scores for Different Models')\nplt.xlabel('Fold')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.xticks(range(1, 6))\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Chapter Five: Rechecking, Review, Discussion, and Conclusion\n\n1. **Reduced Data Accuracy:**\n   - Using 100 days of data, the accuracy for (PC1 + PC3) and (PC1 + PC2 + PC3) dropped to 0.95.\n   - Using 10 days of data, the accuracy for these combinations also reduced to 0.95.\n\n2. **Possible Mistakes:**\n   - The three-day consecutive up and down pattern might introduce bias.\n   - The number of principal components might not be optimal at 3.\n\n### Conclusion\n\nThe model requires further fine-tuning. As an investment strategy, it's not yet reliable due to ignoring important factors. However, for learning purposes, I hope you find this exploration insightful!","metadata":{}},{"cell_type":"code","source":"feature_combinations3 = [\n    ['Principal Component 1'],\n    ['Principal Component 2'],\n    ['Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2'],\n    ['Principal Component 2', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2','Principal Component 3']\n]\n\n# Store accuracies for each combination\naccuracies3 = []\n\n# Evaluate each combination\nfor features in feature_combinations3:\n    X = df4[features]\n    y = df4['Price(Prediction)']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    rf_model = RandomForestClassifier(random_state=42)\n    rf_model.fit(X_train, y_train)\n    y_pred = rf_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    accuracies3.append(accuracy)\n\n# Plot accuracies for each combination\nlabels = ['+'.join(comb) for comb in feature_combinations2]\n\nplt.figure(figsize=(10, 10))\nbars = plt.bar(labels, accuracies3, color='grey')\nplt.xticks(rotation=45, ha='right')\nplt.title('Accuracy of Random Forest with Different Feature Combinations')\nplt.xlabel('Feature Combination')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.tight_layout()\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2f}', ha='center', va='bottom')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df3.tail())\nlast_10_rows = df3.tail(100)\ndf5 = last_10_rows.copy()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_combinations3 = [\n    ['Principal Component 1'],\n    ['Principal Component 2'],\n    ['Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2'],\n    ['Principal Component 2', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 3'],\n    ['Principal Component 1', 'Principal Component 2','Principal Component 3']\n]\n\n# Store accuracies for each combination\naccuracies4 = []\n\n# Evaluate each combination\nfor features in feature_combinations3:\n    X = df5[features]\n    y = df5['Price(Prediction)']\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    rf_model = RandomForestClassifier(random_state=42)\n    rf_model.fit(X_train, y_train)\n    y_pred = rf_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    accuracies4.append(accuracy)\n\n# Plot accuracies for each combination\nlabels = ['+'.join(comb) for comb in feature_combinations2]\n\nplt.figure(figsize=(10, 10))\nbars = plt.bar(labels, accuracies4, color='grey')\nplt.xticks(rotation=45, ha='right')\nplt.title('Accuracy of Random Forest with Different Feature Combinations')\nplt.xlabel('Feature Combination')\nplt.ylabel('Accuracy')\nplt.ylim(0, 1)\nplt.tight_layout()\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, f'{yval:.2f}', ha='center', va='bottom')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}